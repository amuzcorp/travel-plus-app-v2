---
description: rules for typescript and package version
alwaysApply: false
---

## TypeScript 전환 관련

### 1. Enact UI 라이브러리 타입 호환성
- **문제**: Enact UI의 Layout 컴포넌트들이 TypeScript와 완전히 호환되지 않음
- **해결책**: `src/types/enact.d.ts`에서 타입 정의 확장
- **주의**: 새로운 Enact 컴포넌트 사용 시 타입 정의 추가 필요

### 2. React 버전 고정
- **현재 버전**: React 18.2.0, React DOM 18.2.0
- **이유**: Enact 라이브러리와의 호환성
- **주의**: React 19나 다른 버전으로 업그레이드 시 호환성 문제 발생 가능

### 3. npm 의존성 충돌
- **설정**: `.npmrc`에 `legacy-peer-deps=true` 설정
- **package.json**: `overrides`로 React 타입 버전 고정
- **주의**: 새로운 패키지 설치 시 `--legacy-peer-deps` 플래그 사용

## 코드 작성 규칙

### 1. TypeScript 사용
- **파일 확장자**: `.tsx` (React 컴포넌트), `.ts` (일반 TypeScript)
- **타입 정의**: 모든 props, state, 함수에 명시적 타입 지정
- **인터페이스**: 컴포넌트 props는 interface로 정의

### 2. Enact 컴포넌트 사용
- **Layout 컴포넌트**: Row, Column, Cell 사용 시 children 타입 주의
- **Spotlight**: SpotlightContainer 사용 시 타입 단언 필요할 수 있음
- **테마**: styled-components 테마 타입 확장 필요

### 3. ESLint 및 타입 체크
- **명령어**: `npm run lint`, `npm run type-check`
- **자동 수정**: `npm run lint -- --fix`
- **주의**: 타입 오류는 반드시 해결, 경고는 상황에 따라 허용

## 개발 환경 설정

### 1. 필수 설정 파일
- **tsconfig.json**: TypeScript 설정
- **.eslintrc.js**: ESLint 설정 (TypeScript 지원)
- **.npmrc**: npm 설정 (legacy-peer-deps)
- **src/types/enact.d.ts**: Enact 타입 확장

### 2. 패키지 버전 관리
- **React**: 18.2.0 고정
- **TypeScript**: 최신 버전 사용
- **Enact**: 현재 버전 유지

## 주의사항

### 1. 새로운 컴포넌트 추가 시
- TypeScript로 작성
- 적절한 타입 정의 추가
- Enact 컴포넌트 사용 시 타입 호환성 확인

### 2. 외부 라이브러리 추가 시
- Enact와의 호환성 확인
- TypeScript 지원 여부 확인
- 필요시 타입 정의 추가

### 3. 빌드 및 배포
- `npm run pack`: 개발 빌드
- `npm run pack-p`: 프로덕션 빌드
- 타입 체크 통과 후 배포

## 문제 해결 가이드

### 1. 타입 오류 발생 시
1. `src/types/enact.d.ts` 확인
2. 필요한 타입 정의 추가
3. 타입 단언(`as any`) 사용 고려

### 2. 의존성 충돌 발생 시
1. `--legacy-peer-deps` 플래그 사용
2. package.json의 overrides 확인
3. .npmrc 설정 확인

### 3. 컴파일 오류 발생 시
1. TypeScript 설정 확인
2. 파일 확장자 확인 (.tsx/.ts)
3. import 경로 확인

## 성능 최적화

### 1. TypeScript 설정
- `strict: true` 유지
- `noEmit: true` (개발 시)
- 적절한 타입 정의로 런타임 오류 방지

### 2. 번들 크기 최적화
- 사용하지 않는 import 제거
- Tree shaking 활용
- 코드 스플리팅 고려 